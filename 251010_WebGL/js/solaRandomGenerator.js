/**
 * solaRandomGenerator.js
 * シード値を設定可能な決定論的乱数ジェネレータークラス
 * 同じシード値からは同じ乱数シーケンスを生成します。
 * * 使用アルゴリズム: XORShift32
 */
class solaRandomGenerator {
    /**
     * @private
     * 乱数生成器の現在の内部状態（シード値）。32ビット符号なし整数として扱われます。
     */

    currentSeed = 0;

    /**
     * コンストラクタ
     * setSeed()が呼び出されない場合、シードはデフォルト値の 1 で初期化されます。
     */

    constructor() {
        // デフォルトの初期値としてシード値 1 で初期化します。
        this.setSeed(1);
    }

    /**
     * 乱数生成器のシード値を設定します。
     * これにより、乱数シーケンスがリセットされ、同じシードからは同じ乱数が再現されます。
     * @param {number} seed 新しいシード値
     * * 理論的な有効シード値の範囲: 
     * 1 から 4,294,967,295 (2^32 - 1) まで  です。
     * JavaScriptの内部で**32ビット符号なし整数**として扱われるため、
     * 負の値や 2^32 以上の値が入力された場合、**1 ～ 4,294,967,295 の範囲の値に変換されます。**
     * 例えば、**seed=0** や負の値 **(-5)** は内部で **seed=1** になります。
     */


    setSeed(seed) {
        // シードを32ビット符号なし整数に変換します。(>>> 0)
        // これにより、負の値や大きな値も 0 ～ 2^32-1 の範囲に収まります。
        this.currentSeed = seed >>> 0; 
        
        // シードが0の場合（XORShiftの特性上、0だと常に0が続くため）、1に設定します。
        if (this.currentSeed === 0) {
            this.currentSeed = 1;
        }
    }

    /**
     * 次の乱数を取得し、内部状態（シード値）を更新します。
     * @returns {number} 0.0 以上 1.0 未満の乱数値
     */
    getRandom() {
        
        // XORShift32アルゴリズムを使用してシードを更新
        let x = this.currentSeed;
        
        // シフトとXOR演算
        x ^= (x << 13);
        x ^= (x >>> 17);
        x ^= (x << 5);

        // 新しいシード値を保存 (32ビット符号なし整数)
        this.currentSeed = x >>> 0; 

        // 32ビット符号なし整数を最大値で割り、0.0から1.0の間の浮動小数点数を返します
        // 0xFFFFFFFF は 2^32 - 1 です。
        return this.currentSeed / 0xFFFFFFFF;
    }
}



